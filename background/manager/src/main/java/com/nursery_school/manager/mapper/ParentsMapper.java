package com.nursery_school.manager.mapper;

import com.nursery_school.manager.model.Parents;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

@Mapper
public interface ParentsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_parents
     *
     * @mbg.generated Sat Sep 28 15:40:00 CST 2019
     */
    @Delete({
        "delete from t_parents",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_parents
     *
     * @mbg.generated Sat Sep 28 15:40:00 CST 2019
     */
    @Insert({
        "insert into t_parents (id, name)",
        "values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR})"
    })
    int insert(Parents record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_parents
     *
     * @mbg.generated Sat Sep 28 15:40:00 CST 2019
     */
    @Select({
        "select",
        "id, name",
        "from t_parents",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR)
    })
    Parents selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_parents
     *
     * @mbg.generated Sat Sep 28 15:40:00 CST 2019
     */
    @Select({
        "select",
        "id, name",
        "from t_parents"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR)
    })
    List<Parents> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_parents
     *
     * @mbg.generated Sat Sep 28 15:40:00 CST 2019
     */
    @Update({
        "update t_parents",
        "set name = #{name,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Parents record);
    
    @Results({
        @Result(column="p_id", property="p_id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="p_name", property="p_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="login_name", property="loginName", jdbcType=JdbcType.VARCHAR),
        @Result(column="contract", property="contract", jdbcType=JdbcType.VARCHAR),
        @Result(column="birthday", property="birthday", jdbcType=JdbcType.DATE),
        @Result(column="address", property="address", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="avatar", property="avatar", jdbcType=JdbcType.VARCHAR),
        @Result(column="gender", property="gender", jdbcType=JdbcType.INTEGER),
        @Result(column="user_type", property="userType", jdbcType=JdbcType.INTEGER),
        @Result(column="last_login_time", property="lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="state", property="state", jdbcType=JdbcType.INTEGER),
        @Result(column="admin_id", property="adminId", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_id", property="staffId", jdbcType=JdbcType.VARCHAR),
        @Result(column="parents_id", property="parentsId", jdbcType=JdbcType.VARCHAR)
    })
    // 关联用户表和家长表，根据家长id
    @SelectProvider(type = com.nursery_school.manager.model.dyna.ParentsDynaProvider.class, method = "selectUserByPid")
	Map<String, Object> selectUserByPid(String pid);
    
    // 关联用户表和家长表查询多个
    @SelectProvider(type = com.nursery_school.manager.model.dyna.ParentsDynaProvider.class, method = "selectUserAnParents")
    @Results({
        @Result(column="p_id", property="p_id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="p_name", property="p_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_id", property="u_id", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_name", property="u_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_loginName", property="u_loginName", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_contract", property="u_contract", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_birthday", property="u_birthday", jdbcType=JdbcType.DATE),
        @Result(column="u_address", property="u_address", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_password", property="u_password", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_avatar", property="u_avatar", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_gender", property="u_gender", jdbcType=JdbcType.INTEGER),
        @Result(column="u_userType", property="u_userType", jdbcType=JdbcType.INTEGER),
        @Result(column="u_lastLoginTime", property="u_lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="u_createTime", property="u_createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="u_state", property="u_state", jdbcType=JdbcType.INTEGER),
        @Result(column="u_adminId", property="u_adminId", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_staffId", property="u_staffId", jdbcType=JdbcType.VARCHAR),
        @Result(column="u_parentsId", property="u_parentsId", jdbcType=JdbcType.VARCHAR)
    })
   	List<Map<String, Object>> selectUserAnParents(Map<String, Object> map);
    
    @Select({
        "SELECT ts.id as s_id,ts.name as s_name,ts.contract as s_contract,ts.address as s_address,"
        + "ts.in_date as s_inDte,ts.parent_id as s_parentId,ts.student_id as s_studentId,ts.father_tel as s_fatherTel,ts.mather_tel as s_matherTel,"
        + "ts.father_name as s_fatherName,ts.mather_name as s_matherName,ts.birthday as s_birthday,ts.gender as s_gender,ts.class_id as s_classId,tp.id as p_id,"
        + "tp.name as p_name FROM t_student ts LEFT JOIN t_parents tp on ts.parent_id=tp.id where ts.parent_id=#{parentId}"
    })
    @Results({
    	@Result(column="p_id", property="p_id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="p_name", property="p_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_id", property="s_id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="s_name", property="s_name", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_contract", property="s_contract", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_address", property="s_address", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_inDate", property="s_inDate", jdbcType=JdbcType.DATE),
        @Result(column="s_parentId", property="s_parentId", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_studentId", property="s_studentId", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_fatherTel", property="s_fatherTel", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_matherTel", property="s_matherTel", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_fatherName", property="s_fatherName", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_matherName", property="s_matherName", jdbcType=JdbcType.VARCHAR),
        @Result(column="s_birthday", property="s_birthday", jdbcType=JdbcType.DATE),
        @Result(column="s_gender", property="s_gender", jdbcType=JdbcType.INTEGER),
        @Result(column="s_classId", property="s_classId", jdbcType=JdbcType.VARCHAR)
    })
    List<Map<String, Object>> findParentChils(String parentId);
    
    @UpdateProvider(type = com.nursery_school.manager.model.dyna.ParentsDynaProvider.class, method = "updateProvider")
   	void update(Map<String, Object> map);
    
}